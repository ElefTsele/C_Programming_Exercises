name: Build and Test All

on:
  # Trigger the workflow on push or pull_request to the 'main' branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ------------------------------------------------------------------
  # 1) "find-exercises" job: scans the 'examples' folder to detect
  #    all exercise numbers (e.g. 01, 02, 03, ...). Creates a JSON array
  #    like ["01","02"] and passes it to the next job.
  # ------------------------------------------------------------------
  find-exercises:
    runs-on: ubuntu-latest
    outputs:
      exercises_json: ${{ steps.ex-out.outputs.matrix_exercises }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Find exercises
        id: ex-out
        run: |
          # Initialize an empty Bash array
          EXERCISE_LIST=()

          # List all files in the examples folder. 
          # We use grep -E to match a pattern like "NN_..._example.c"
          # e.g.: "01_array_stats_example.c"
          for file in $(ls examples | grep -E '^[0-9]{2}_.+_example\.c'); do
            # Extract the first 2 characters (the exercise number), e.g. "01"
            EX_NUM="${file:0:2}"

            # Avoid duplicates
            if [[ ! " ${EXERCISE_LIST[@]} " =~ " ${EX_NUM} " ]]; then
              EXERCISE_LIST+=("$EX_NUM")
            fi
          done

          # If no exercises are found, create an empty JSON array
          if [ ${#EXERCISE_LIST[@]} -eq 0 ]; then
            EXERCISES_JSON='[]'
          else
            # Build a JSON array, e.g. ["01","02","03"]
            EXERCISES_JSON=$(printf '["%s"]' "${EXERCISE_LIST[0]}")
            for ((i=1; i<${#EXERCISE_LIST[@]}; i++)); do
              EXERCISES_JSON=$(echo "${EXERCISES_JSON}" | sed "s/]/,\"${EXERCISE_LIST[$i]}\"]/")
            done
          fi

          echo "Found exercises: $EXERCISES_JSON"
          # Use GITHUB_OUTPUT to export the JSON string to the next job
          echo "matrix_exercises=$EXERCISES_JSON" >> $GITHUB_OUTPUT


  # ------------------------------------------------------------------
  # 2) "build-and-test" job: uses the JSON array from "find-exercises"
  #    to create a matrix of exercises. For each exercise number, it
  #    runs the specified steps (example, manual test, unity test, etc.).
  # ------------------------------------------------------------------
  build-and-test:
    needs: [ find-exercises ]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        exercise: ${{ fromJson(needs.find-exercises.outputs.exercises_json) }}
      # If you want each exercise to fail independently, set fail-fast: false
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      # ----------------------------------------------
      # Build/Run Example (if exists)
      # ----------------------------------------------
      - name: Build example (if exists)
        run: |
          echo "Searching for example with pattern '${{ matrix.exercise }}_*_example.c'"
          find examples -name "${{ matrix.exercise }}_*_example.c"
          FILE=$(find examples -name "${{ matrix.exercise }}_*_example.c" | head -n 1)
          echo "Found file: $FILE"
          if [ -f "$FILE" ]; then
            echo "Running example for EXERCISE=${{ matrix.exercise }}"
            make EXERCISE=${{ matrix.exercise }} run_example
          else
            echo "No example file for EXERCISE=${{ matrix.exercise }} — Skipping."
          fi

      # ----------------------------------------------
      # Build/Run manual test (if exists)
      # ----------------------------------------------
      - name: Run manual test (if exists)
        run: |
          echo "Searching for manual test with pattern '${{ matrix.exercise }}_*_manual.c'"
          find tests/manual -name "${{ matrix.exercise }}_*_manual.c"
          FILE=$(find tests/manual -name "${{ matrix.exercise }}_*_manual.c" | head -n 1)
          echo "Found file: $FILE"
          if [ -f "$FILE" ]; then
            echo "Running manual test for EXERCISE=${{ matrix.exercise }}"
            make EXERCISE=${{ matrix.exercise }} run_manual_test
          else
            echo "No manual test file for EXERCISE=${{ matrix.exercise }} — Skipping."
          fi

      # ----------------------------------------------
      # Build/Run Unity test (if exists)
      # ----------------------------------------------
      - name: Run Unity test (if exists)
        run: |
          echo "Searching for unity test with pattern '${{ matrix.exercise }}_*_unity.c'"
          find tests/unity -name "${{ matrix.exercise }}_*_unity.c"
          FILE=$(find tests/unity -name "${{ matrix.exercise }}_*_unity.c" | head -n 1)
          echo "Found file: $FILE"
          if [ -f "$FILE" ]; then
            echo "Running unity test for EXERCISE=${{ matrix.exercise }}"
            make EXERCISE=${{ matrix.exercise }} run_unity_test
          else
            echo "No unity test file for EXERCISE=${{ matrix.exercise }} — Skipping."
          fi

      # ----------------------------------------------
      # Optional step: Check include paths
      # ----------------------------------------------
      - name: Check include paths
        run: |
          make EXERCISE=${{ matrix.exercise }} check_includes || echo "Include check skipped"
